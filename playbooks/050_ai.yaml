- name: Deploy AI stack
  hosts: manager:&cloud
  vars:
    ansible_python_interpreter: /root/.ansible_venv/bin/python
  vars_files:
    - ../vault.yaml
  tasks:
    - name: Create pgvector_data volume
      community.docker.docker_volume:
        name: pgvector_data

    - name: Create librechat_images volume
      community.docker.docker_volume:
        name: librechat_images

    - name: Create mongodb_data volume
      community.docker.docker_volume:
        name: mongodb_data

    - name: Create meili_data volume
      community.docker.docker_volume:
        name: meili_data

    - name: Create ai network
      community.docker.docker_network:
        name: ai
        driver: overlay

    - name: Create AI stack directory
      file:
        path: /root/stacks/ai
        state: directory

    - name: Copy compose file to AI stack directory
      copy:
        src: ../stacks/ai/compose.yaml
        dest: /root/stacks/ai/compose.yaml

    - name: Create librechat.yaml file
      copy:
        content: |
          version: 1.2.1

          cache: true

          endpoints:
            agents:
              recursionLimit: 50
              disableBuilder: false

          speech:
            stt:
              openai:
                apiKey: '{{ api_keys.openai }}'
                model: 'whisper-1'
            tts:
              openai:
                apiKey: '{{ api_keys.openai }}'
                model: 'tts-1'
                voices: ['alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer']

        dest: /root/stacks/ai/librechat.yaml

    - name: Create .env file
      copy:
        content: |
          HOST=ai.rusanov.cloud
          PORT=3080

          DOMAIN_CLIENT=https://ai.rusanov.cloud
          DOMAIN_SERVER=https://ai.rusanov.cloud

          NO_INDEX=true

          #===============#
          # JSON Logging  #
          #===============#

          # Use when process console logs in cloud deployment like GCP/AWS
          CONSOLE_JSON=false

          #===============#
          # Debug Logging #
          #===============#

          DEBUG_LOGGING=true
          DEBUG_CONSOLE=true

          #=============#
          # Permissions #
          #=============#

          # UID=1000
          # GID=1000

          #===============#
          # Configuration #
          #===============#
          # Use an absolute path, a relative path, or a URL

          # CONFIG_PATH="/alternative/path/to/librechat.yaml"

          #===================================================#
          #                     Endpoints                     #
          #===================================================#

          ENDPOINTS=openAI,agents

          #============#
          # OpenAI     #
          #============#

          OPENAI_API_KEY={{ api_keys.openai }}
          OPENAI_MODELS=gpt-4.1-mini,gpt-4.1-nano,gpt-4.1,o4-mini

          DEBUG_OPENAI=false

          # TITLE_CONVO=false
          OPENAI_TITLE_MODEL=gpt-4.1-nano

          OPENAI_SUMMARIZE=true
          OPENAI_SUMMARY_MODEL=gpt-4.1-nano

          CREDS_KEY={{ stacks.ai.env.CREDS_KEY }}
          CREDS_IV={{ stacks.ai.env.CREDS_IV }}

          #==================================================#
          #                      Search                      #
          #==================================================#

          SEARCH=true
          MEILI_NO_ANALYTICS=true
          MEILI_HOST=http://0.0.0.0:7700
          MEILI_MASTER_KEY={{ stacks.ai.env.MEILI_MASTER_KEY }}

          #==================================================#
          #          Speech to Text & Text to Speech         #
          #==================================================#

          STT_API_KEY={{ api_keys.openai }}
          TTS_API_KEY={{ api_keys.openai }}

          #==================================================#
          #                        RAG                       #
          #==================================================#
          # More info: https://www.librechat.ai/docs/configuration/rag_api

          # RAG_OPENAI_BASEURL=
          # RAG_OPENAI_API_KEY=
          # EMBEDDINGS_PROVIDER=openai
          # EMBEDDINGS_MODEL=text-embedding-3-small

          #===================================================#
          #                    User System                    #
          #===================================================#

          #========================#
          # Moderation             #
          #========================#

          OPENAI_MODERATION=false
          OPENAI_MODERATION_API_KEY=
          # OPENAI_MODERATION_REVERSE_PROXY=

          BAN_VIOLATIONS=true
          BAN_DURATION=1000 * 60 * 60 * 2
          BAN_INTERVAL=20

          LOGIN_VIOLATION_SCORE=1
          REGISTRATION_VIOLATION_SCORE=1
          CONCURRENT_VIOLATION_SCORE=1
          MESSAGE_VIOLATION_SCORE=1
          NON_BROWSER_VIOLATION_SCORE=20

          LOGIN_MAX=7
          LOGIN_WINDOW=5
          REGISTER_MAX=5
          REGISTER_WINDOW=60

          LIMIT_CONCURRENT_MESSAGES=true
          CONCURRENT_MESSAGE_MAX=2

          LIMIT_MESSAGE_IP=true
          MESSAGE_IP_MAX=40
          MESSAGE_IP_WINDOW=1

          LIMIT_MESSAGE_USER=false
          MESSAGE_USER_MAX=40
          MESSAGE_USER_WINDOW=1

          ILLEGAL_MODEL_REQ_SCORE=5

          #========================#
          # Balance                #
          #========================#

          CHECK_BALANCE=false

          #========================#
          # Registration and Login #
          #========================#

          ALLOW_EMAIL_LOGIN=true
          ALLOW_REGISTRATION=false
          ALLOW_SOCIAL_LOGIN=true
          ALLOW_SOCIAL_REGISTRATION=true
          ALLOW_PASSWORD_RESET=true
          # ALLOW_ACCOUNT_DELETION=true # note: enabled by default if omitted/commented out
          ALLOW_UNVERIFIED_EMAIL_LOGIN=true

          SESSION_EXPIRY=1000 * 60 * 15
          REFRESH_TOKEN_EXPIRY=(1000 * 60 * 60 * 24) * 7

          JWT_SECRET={{ stacks.ai.env.JWT_SECRET }}
          JWT_REFRESH_SECRET={{ stacks.ai.env.JWT_REFRESH_SECRET }}

          # OpenID
          OPENID_ISSUER=https://auth.rusanov.cloud/application/o/librechat/.well-known/openid-configuration
          OPENID_CLIENT_ID={{ stacks.ai.env.OPENID_CLIENT_ID }}
          OPENID_CLIENT_SECRET={{ stacks.ai.env.OPENID_CLIENT_ID }}
          OPENID_SESSION_SECRET={{ stacks.ai.env.OPENID_SESSION_SECRET }}
          OPENID_CALLBACK_URL=/oauth/openid/callback
          OPENID_SCOPE="openid profile email"
          # OPENID_REQUIRED_ROLE=user
          # OPENID_REQUIRED_ROLE_TOKEN_KIND=
          # OPENID_REQUIRED_ROLE_PARAMETER_PATH=

          # OPENID_BUTTON_LABEL=Authentik
          # OPENID_IMAGE_URL=

          #========================#
          # Email Password Reset   #
          #========================#

          EMAIL_HOST="{{ smtp.host }}"
          EMAIL_PORT="{{ smtp.port }}"
          EMAIL_ENCRYPTION=tls
          EMAIL_ALLOW_SELFSIGNED=true
          EMAIL_USERNAME="{{ smtp.user }}"
          EMAIL_PASSWORD="{{ smtp.password }}"
          EMAIL_FROM_NAME="{{ smtp.from_name }}"
          EMAIL_FROM="{{ smtp.from }}"

          #========================#
          # Shared Links           #
          #========================#

          ALLOW_SHARED_LINKS=true
          ALLOW_SHARED_LINKS_PUBLIC=false

          #==============================#
          # Static File Cache Control    #
          #==============================#

          # Leave commented out to use defaults: 1 day (86400 seconds) for s-maxage and 2 days (172800 seconds) for max-age
          # NODE_ENV must be set to production for these to take effect
          # STATIC_CACHE_MAX_AGE=172800
          # STATIC_CACHE_S_MAX_AGE=86400

          # If you have another service in front of your LibreChat doing compression, disable express based compression here
          DISABLE_COMPRESSION=true

          #===================================================#
          #                        UI                         #
          #===================================================#

          APP_TITLE=LibreChat
          # CUSTOM_FOOTER="My custom footer"
          HELP_AND_FAQ_URL=https://librechat.ai

          # SHOW_BIRTHDAY_ICON=true

          POSTGRES_DB=librechat_vector
          POSTGRES_USER=pgvector
          POSTGRES_PASSWORD={{ stacks.ai.env.POSTGRES_PASSWORD }}
        dest: /root/stacks/ai/.env

    - name: Deploy AI stack from a compose file
      community.docker.docker_stack:
        state: present
        name: ai
        compose:
          - /root/stacks/ai/compose.yaml
