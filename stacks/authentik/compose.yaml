version: "3.8"

services:
  server:
    image: ghcr.io/goauthentik/server:2024.6.4
    restart: unless-stopped:3
    deploy:
      labels:
        - "forceUpdate=2024.09.13_01.32"
        - "traefik.enable=true"
        - "traefik.http.services.authentik.loadbalancer.server.port=9001"
        - "traefik.http.routers.authentik.rule=Host(`auth.rusanov.cloud`)"
        - "traefik.http.routers.authentik.entrypoints=websecure"
        - "traefik.http.routers.authentik.tls.certresolver=default-acme"
      replicas: 1
      update_config:
        parallelism: 2
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: file:///run/secrets/authentik_secret_key
      AUTHENTIK_REDIS__HOST: databases_redis
      AUTHENTIK_POSTGRESQL__HOST: databases_postgres
      AUTHENTIK_POSTGRESQL__USER: postgres
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: file:///run/secrets/postgres_password
      AUTHENTIK_LISTEN__HTTP: 0.0.0.0:9001
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
    networks:
      - databases
      - nginx
      - proxy
    secrets:
      - authentik_secret_key
      - postgres_password

  worker:
    image: ghcr.io/goauthentik/server:2024.6.4
    restart: unless-stopped:3
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        order: stop-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: file:///run/secrets/authentik_secret_key
      AUTHENTIK_REDIS__HOST: databases_redis
      AUTHENTIK_POSTGRESQL__HOST: databases_postgres
      AUTHENTIK_POSTGRESQL__USER: postgres
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: file:///run/secrets/postgres_password
      AUTHENTIK_LISTEN__HTTP: 0.0.0.0:9001
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentik_media:/media
      - authentik_certs:/certs
      - authentik_templates:/templates
    networks:
      - databases
    secrets:
      - authentik_secret_key
      - postgres_password

secrets:
  authentik_secret_key:
    external: true
  postgres_password:
    external: true

volumes:
  authentik_media:
    external: true
  authentik_certs:
    external: true
  authentik_templates:
    external: true

networks:
  databases:
    external: true
  nginx:
    external: true
  proxy:
    external: true
